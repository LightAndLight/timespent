#! /usr/bin/env ipso

main : IO ()
main =
  comp
    let suffix = "txt"
    bind templateFileVar? <- env.getvar "TEMPLATE_FILE"
    let 
      templateFile = 
        case templateFileVar? of
          None () -> "./template.$suffix"
          Some templateFile -> templateFile

    bind monday <- io.map string.trim <| cmd.read `date --date "last sunday + 1 day" +%Y-%m-%d`
    let mondayDir = "$monday-week"
    cmd.run `mkdir -p $mondayDir`

    bind today <- io.map string.trim <| cmd.read `date +%Y-%m-%d`
    let todayFile = "$mondayDir/$today.$suffix"
    
    bind todayFileExists <- path.exists todayFile
    bind new <-
      if todayFileExists
      then
        comp
          println "$todayFile found, opening..."
          io.pure false
      else
        comp
          println "$todayFile not found, creating..."
          cmd.run `cp $templateFile $todayFile`
          cmd.run `chmod +rw $todayFile`
          io.pure true
   
    bind editor <- env.getvar! "EDITOR"
    cmd.run `$editor $todayFile`

    bind changed <-
      comp
        bind result <- cmd.try `git diff --quiet $todayFile`
        case result of
          Success () ->
            # no changes
            io.pure false
          Failure 1 ->
            io.pure true
          Failure code ->
            comp
              println "error: git diff --quiet $todayFile exited with unexpected status: ${int.toString code}"
              exit.failure

    if not (changed || new)
      then println "no changes detected"
      else
        comp
          bind commitHashes <- cmd.lines `git log --grep=^$today\$ --pretty=%H`
          case commitHashes of
            [] ->
              comp
                cmd.run `git add $todayFile`
                cmd.run `git commit -m $today`
            [targetCommitHash] ->
              comp
                cmd.run `git add $todayFile`

                bind hasUnstagedFiles <- 
                  io.map (\unstagedFiles -> array.length unstagedFiles != 0) <|
                  cmd.lines `git diff --name-only`
                
                cmd.run `git commit -m "squash! $targetCommitHash"`

                # `git rebase` doesn't work when there are unstaged files, so
                # stash anything yet unstaged.
                if hasUnstagedFiles
                  then cmd.run `git stash`
                  else io.pure ()

                # https://github.com/LightAndLight/ipso/issues/330
                # `git rebase -i --autosquash $targetCommitHash^` |>
                #   cmd.withenv "GIT_EDITOR" "true" |>
                #   cmd.run
                env.setvar "GIT_EDITOR" "true"
                cmd.run `git rebase -i --autosquash $targetCommitHash^`

                if hasUnstagedFiles
                  then cmd.run `git stash pop`
                  else io.pure ()
            _ ->
              comp
                println "error: found multiple commits mentioning $today: ${debug commitHashes}"
                exit.failure
    
    println "done"
